{"ast":null,"code":"var _jsxFileName = \"/Users/mohamed/Quote-project/src/pages/NewQuote.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport QuoteForm from \"../components/quotes/QuoteForm\";\nimport useHttp from \"../hooks/use-http\";\nimport { addQuote } from \"../lib/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewQuote = () => {\n  _s();\n  const {\n    sendRequest,\n    status\n  } = useHttp(addQuote);\n  const history = useHistory();\n  useEffect(() => {\n    if (status === 'completed') {\n      history.push('/quotes');\n    }\n  }, [status, history]); //when the status and the history change (dependencies)\n\n  const addQuoteHandler = quoteData => {\n    sendRequest(quoteData);\n\n    // history.push('/quotes'); \n  };\n\n  return /*#__PURE__*/_jsxDEV(QuoteForm, {\n    isLoading: status === 'pending',\n    onAddQuote: addQuoteHandler\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n};\n_s(NewQuote, \"5R0BdBCtVz434540tvdSmkfpsRY=\", false, function () {\n  return [useHttp, useHistory];\n});\n_c = NewQuote;\nexport default NewQuote;\n\n// Sans le useHistory qui est evidemment un React Hook, nous ne pouvons pas quitter la page new quote apres le submit.\n// .push permet d'ajouter la nvlle page on pouvait utiliser .replace ...\n// isLoading est utilise comme props dans le component QuoteForm pour afficher LoadingSpinner\nvar _c;\n$RefreshReg$(_c, \"NewQuote\");","map":{"version":3,"names":["useEffect","useHistory","QuoteForm","useHttp","addQuote","jsxDEV","_jsxDEV","NewQuote","_s","sendRequest","status","history","push","addQuoteHandler","quoteData","isLoading","onAddQuote","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mohamed/Quote-project/src/pages/NewQuote.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport QuoteForm from \"../components/quotes/QuoteForm\";\nimport useHttp from \"../hooks/use-http\";\nimport { addQuote } from \"../lib/api\";\n\nconst NewQuote = () => {\n  const { sendRequest, status } = useHttp(addQuote);\n  const history= useHistory();\n\n  useEffect(() => {\n    if (status === 'completed') {\n      history.push('/quotes');\n    }\n  }, [status, history]); //when the status and the history change (dependencies)\n\n  const addQuoteHandler = quoteData => {\n    sendRequest(quoteData);\n\n    // history.push('/quotes'); \n  };\n\n  return <QuoteForm  isLoading= {status === 'pending'} onAddQuote={addQuoteHandler} />;\n};\n\nexport default NewQuote;\n\n// Sans le useHistory qui est evidemment un React Hook, nous ne pouvons pas quitter la page new quote apres le submit.\n// .push permet d'ajouter la nvlle page on pouvait utiliser .replace ...\n// isLoading est utilise comme props dans le component QuoteForm pour afficher LoadingSpinner"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,UAAU,QAAQ,kBAAkB;AAE7C,OAAOC,SAAS,MAAM,gCAAgC;AACtD,OAAOC,OAAO,MAAM,mBAAmB;AACvC,SAASC,QAAQ,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC,WAAW;IAAEC;EAAO,CAAC,GAAGP,OAAO,CAACC,QAAQ,CAAC;EACjD,MAAMO,OAAO,GAAEV,UAAU,CAAC,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACd,IAAIU,MAAM,KAAK,WAAW,EAAE;MAC1BC,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC;IACzB;EACF,CAAC,EAAE,CAACF,MAAM,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEvB,MAAME,eAAe,GAAGC,SAAS,IAAI;IACnCL,WAAW,CAACK,SAAS,CAAC;;IAEtB;EACF,CAAC;;EAED,oBAAOR,OAAA,CAACJ,SAAS;IAAEa,SAAS,EAAGL,MAAM,KAAK,SAAU;IAACM,UAAU,EAAEH;EAAgB;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACtF,CAAC;AAACZ,EAAA,CAjBID,QAAQ;EAAA,QACoBJ,OAAO,EACxBF,UAAU;AAAA;AAAAoB,EAAA,GAFrBd,QAAQ;AAmBd,eAAeA,QAAQ;;AAEvB;AACA;AACA;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}