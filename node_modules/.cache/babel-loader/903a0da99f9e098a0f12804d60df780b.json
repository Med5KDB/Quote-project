{"ast":null,"code":"var _jsxFileName = \"/home/mohamed/new_react_project/src/pages/NewQuote.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport QuoteForm from \"../components/quotes/QuoteForm\";\nimport useHttp from \"../hooks/use-http\";\nimport { addQuote } from \"../lib/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewQuote = () => {\n  _s();\n\n  const {\n    sendRequest,\n    status\n  } = useHttp(addQuote);\n  const history = useHistory();\n  useEffect(() => {\n    if (status === 'completed') {\n      history.push('/quotes');\n    }\n  }, [status, history]); //when the status and the history change (dependencies)\n\n  const addQuoteHandler = quoteData => {\n    sendRequest(quoteData); // history.push('/quotes'); \n  };\n\n  return /*#__PURE__*/_jsxDEV(QuoteForm, {\n    isLoading: status === 'pending',\n    onAddQuote: addQuoteHandler\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n};\n\n_s(NewQuote, \"5R0BdBCtVz434540tvdSmkfpsRY=\", false, function () {\n  return [useHttp, useHistory];\n});\n\n_c = NewQuote;\nexport default NewQuote; // Sans le useHistory qui est evidemment un React Hook, nous ne pouvons pas quitter la page new quote apres le submit.\n// .push permet d'ajouter la nvlle page on pouvait utiliser .replace ...\n// isLoading est utilise comme props dans le component QuoteForm pour afficher LoadingSpinner\n\nvar _c;\n\n$RefreshReg$(_c, \"NewQuote\");","map":{"version":3,"names":["useEffect","useHistory","QuoteForm","useHttp","addQuote","NewQuote","sendRequest","status","history","push","addQuoteHandler","quoteData"],"sources":["/home/mohamed/new_react_project/src/pages/NewQuote.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport QuoteForm from \"../components/quotes/QuoteForm\";\nimport useHttp from \"../hooks/use-http\";\nimport { addQuote } from \"../lib/api\";\n\nconst NewQuote = () => {\n  const { sendRequest, status } = useHttp(addQuote);\n  const history= useHistory();\n\n  useEffect(() => {\n    if (status === 'completed') {\n      history.push('/quotes');\n    }\n  }, [status, history]); //when the status and the history change (dependencies)\n\n  const addQuoteHandler = quoteData => {\n    sendRequest(quoteData);\n\n    // history.push('/quotes'); \n  };\n\n  return <QuoteForm  isLoading= {status === 'pending'} onAddQuote={addQuoteHandler} />;\n};\n\nexport default NewQuote;\n\n// Sans le useHistory qui est evidemment un React Hook, nous ne pouvons pas quitter la page new quote apres le submit.\n// .push permet d'ajouter la nvlle page on pouvait utiliser .replace ...\n// isLoading est utilise comme props dans le component QuoteForm pour afficher LoadingSpinner"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,QAAT,QAAyB,YAAzB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EACrB,MAAM;IAAEC,WAAF;IAAeC;EAAf,IAA0BJ,OAAO,CAACC,QAAD,CAAvC;EACA,MAAMI,OAAO,GAAEP,UAAU,EAAzB;EAEAD,SAAS,CAAC,MAAM;IACd,IAAIO,MAAM,KAAK,WAAf,EAA4B;MAC1BC,OAAO,CAACC,IAAR,CAAa,SAAb;IACD;EACF,CAJQ,EAIN,CAACF,MAAD,EAASC,OAAT,CAJM,CAAT,CAJqB,CAQE;;EAEvB,MAAME,eAAe,GAAGC,SAAS,IAAI;IACnCL,WAAW,CAACK,SAAD,CAAX,CADmC,CAGnC;EACD,CAJD;;EAMA,oBAAO,QAAC,SAAD;IAAY,SAAS,EAAGJ,MAAM,KAAK,SAAnC;IAA8C,UAAU,EAAEG;EAA1D;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAjBD;;GAAML,Q;UAC4BF,O,EACjBF,U;;;KAFXI,Q;AAmBN,eAAeA,QAAf,C,CAEA;AACA;AACA"},"metadata":{},"sourceType":"module"}